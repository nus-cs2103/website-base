{% from "common/macros.njk" import embed_topic with context %}

#### <span class="badge badge-primary">PE-D</span> <span class="text-primary">Overview</span>

**What**: The latest release of the {{ version_penultimate }} period is subjected to a round of peer _acceptance/system testing_, also called the _Practical Exam (PE) Dry Run_ as this round of testing will be similar to the graded <trigger trigger="click" for="modal:projectDeliverablesPeDryRun-pe">Practical Exam that will be done at {{ version_final }}</trigger>.

**When, where**: uses a 40 minute slot at the start of week 11 lecture slot (to be done online).

<modal large header="Admin {{ icon_embedding }} tP → Practical Exam" id="modal:projectDeliverablesPeDryRun-pe">
  <include src="tp-pe.md#tp-practicalexam"/>
</modal>

{{ icon_important_big_red }} **Grading**: The PE dry run ==affects your grade in the following ways==.
* If you scored less than half of the marks in the PE, we will consider your performance in PE dry run as well when calculating the PE marks.
* PE dry run is a way for you to practice for the actual PE.
* Taking part in the PE dry run will earn you participation points.
* There is ==no penalty for bugs reported== in your product. Every bug you find is a win-win for you and the team whose product you are testing.

**Why**:
* **To train you** to do manual testing, bug reporting, bug <tooltip content="assigning of priority order">triaging,</tooltip> bug fixing, communicating with users/testers/developers, evaluating products etc.
* **To help you improve your product** before the final submission.

#### <span class="badge badge-primary">PE-D</span> <span class="text-primary">Preparation</span>

<include src="tp-testing.mbdf#testingPreparations" var-pe_active_tab="0"/>

#### <span class="badge badge-primary">PE-D</span> <span class="text-primary">During the session</span>

{% if cs2103 and S == "1" %}
**Join the zoom session of the regular lecture** (you ==must attend the lecture _officially_ allocated== to you -- you are not allowed to attend an alternative lecture slot this week).
{% endif %}

**Use ==the [CATcher Web app](https://catcher-org.github.io/CATcher/)==** for reporting bugs.

**Use MS Teams (not Zoom) to contact prof** if you need help during the session. Use Zoom chat only if you don't get a response via MS Teams.

<box type="warning" seamless>

****How many bugs to report?****

Report as many bugs as you can find during the given time. Take longer if you need. If you can't find many bugs at this stage when the product is largely untested, you are unlikely to be able to find enough bugs in the better-tested final submission later. In that case, all the more reasons to spend more time and find more bugs now.

**Bug reports marked as `invalid` by the receiving team** later will not count for credit.

**The median number of bugs reported in the previous semester's PED was 9.** Someone reporting just a 2-3 bugs is usually a sign of a half-hearted attempt rather than lack of bugs to find. If you really can't find bugs, at least submit suggestions for improvements.
</box>

**PE and PE-D are _manual_ testing sessions.** Using test automation tools or scripting is not allowed.

**Test the product and report bugs** as described below, when the prof informs you to begin testing.

{% set pe_active_tab="0" %}

<div id="tp-pe-testing-instructions">

<box>

##### <div class="text-white bg-secondary p-1">**Testing instructions for PE and PE-D**</div>

###### <div class="text-white bg-secondary p-1">a) Launching the JAR file</div>

* Get the jar file to be tested:

<tabs active="{{ pe_active_tab }}">
<tab header="PE Dry Run (at **{{ version_penultimate }}**)">

* Download the _latest_ JAR file from the team's releases page, if you haven't done this already.

</tab>
<tab header="PE (at **{{ version_final }}**)">

* Download the zip file from the given location, if you haven't done that already.
* Unzip the downloaded zip file with the password (to be given to you at the start of the PE, via LumiNUS gradebook). This will give you another zip file with the name suffix `_inner.zip`.
* Unzip the inner zip file. This will give you the JAR file and other PDF files needed for the PE. ==Warning: do not run the JAR file while it is still inside the zip file==.<br>

</tab>
</tabs>
<p/>

* Put the JAR file ==in an empty folder== in which the app is allowed to create files %%(i.e., do not use a write-protected folder)%%.<br>
  In rare cases, the team could have submitted a ZIP file instead of a JAR file. In that case, unzip that file into the target folder.
* Open a command window. Run the `java -version` command to ensure you are using Java 11.
* Check the UG to see if there are extra things you need to do before launching the JAR file %%e.g., download another file from somewhere%%<br>
  {{ icon_info }} You may visit the team's _releases_ page on GitHub if they have provided some extra files you need to download.
* Launch the jar file ==using the `java -jar` command== rather than double-clicking %%(reason: to ensure the jar file is using the same java version that you verified above)%%. Use double-clicking as a last resort.<br>
  {{ icon_info }} If you are on Windows, use the DOS prompt or the PowerShell (not the WSL terminal) to run the JAR file.<br>
  {{ icon_info }} If the JAR file name has spaces in it, remember to surround it with double quotes.<br>
  e.g., `java -jar "Name With Spaces.jar"`
* **If the product doesn't work at all:** If the product fails catastrophically %%e.g., cannot even launch, or even the basic commands crash the app%%, contact the invigilator (via MS Teams, and failing that, via Zoom chat) to receive a _fallback_ team to test.


###### <div class="text-white bg-secondary p-1">b) What to test</div>

<tabs active="{{ pe_active_tab }}">
<tab header="PE Dry Run (at **{{ version_penultimate }}**)">

* Test the product ==based on the User Guide== available from their GitHub website `https://{team-id}.github.io/{{ tp_repo_name }}/UserGuide.html`.
* Do ==_system_ testing first== %%i.e., does the product work as specified by the documentation?%%. If there is time left, you can ==do _acceptance_ testing as well== %%i.e., does the product solve the problem it claims to solve?%%.

</tab>
<tab header="PE (at **{{ version_final }}**)">

* Test ==based on the Developer Guide== (Appendix named _Instructions for Manual Testing_) ==and the User Guide==. The testing instructions in the Developer Guide can provide you some guidance but if you follow those instructions strictly, you are unlikely to find many bugs. You can deviate from the instructions to probe areas that are more likely to have bugs.
* As before, do both ==_system testing_ and _acceptance testing_== but give priority to system testing as those bugs can earn you more credit.
* {{ icon_tip }} Be careful when copying commands from the UG (PDF version) to the software as some PDF viewers can affect the pasted text. If that happens, you might want to open the UG in a different PDF viewer.

</tab>
</tabs>
<p/>

###### <div class="text-white bg-secondary p-1">c) What bugs to report?</div>

<tabs active="{{ pe_active_tab }}">
<tab header="PE Dry Run (at **{{ version_penultimate }}**)">

* You may report functionality bugs, UG bugs, and feature flaws.
<div class="indented-level2">

{{ embed_topic("tp-grading-bugs.mbdf#functionalityBugs", "Admin " + icon_embedding + " tP Grading → **Functionality Bugs**", "3") }}
{{ embed_topic("tp-grading-bugs.mbdf#featureFlaws", "Admin " + icon_embedding + " tP Grading → **Feature Flaws**", "3") }}
{{ embed_topic("tp-grading-bugs.mbdf#ugBugs", "Admin " + icon_embedding + " tP Grading → **Possible UG Bugs**", "3") }}
</div><p/>

* You can also post suggestions on how to improve the product.<br>
  {{ icon_tip }} Be diplomatic when reporting bugs or suggesting improvements. For example, instead of criticising the current behavior, simply suggest alternatives to consider.

</tab>
<tab header="PE (at **{{ version_final }}**)">

* Report functionality bugs:

{{ embed_topic("tp-grading-bugs.mbdf#functionalityBugs", "Admin " + icon_embedding + " tP Grading → **Functionality Bugs**", "3", indent="2") }}


* Do not post suggestions but if the product is missing a critical functionality that makes the product less useful to the intended user, it can be reported as a bug of type `Type.FeatureFlaw`. The dev team is allowed to reject bug reports framed as mere suggestions or/and lacking in a convincing justification as to why the omission of that functionality is problematic.
{{ embed_topic("tp-grading-bugs.mbdf#featureFlaws", "Admin " + icon_embedding + " tP Grading → **Feature Flaws**", "3", indent="2") }}

* You may also report UG bugs.
{{ embed_topic("tp-grading-bugs.mbdf#ugBugs", "Admin " + icon_embedding + " tP Grading → **Possible UG Bugs**", "3", indent="2") }}


</tab>
</tabs>
<p/>


###### <div class="text-white bg-secondary p-1">d) How to report bugs</div>

* {{ icon_important_big_red }} **Post bugs as you find them** %%(i.e., do not wait to post all bugs at the end)%% because <span class="text-danger">bug reports created/modified after the allocated time will not count.</span>
<div class="indented-level2">

<tabs>
<tab header="Using CATcher">

* Launch CATcher, and login to the correct profile:
  * PE Dry Run: `{{ module_pair }} PE Dry run`
  * PE: `{{ module_pair }} PE`
* Post bugs using CATcher.
</tab>
<tab header="Not using CATcher">
<div class="indented-less">

<include src="tp-testing.mbdf#not-using-catcher-warning" />

<markdown>
* Post bug reports in the following repo you created earlier:
  * PE Dry Run: `ped`
  * PE: `pe`
* The whole description of the bug should be in the issue description i.e., ==do not add comments to the issue==.
</markdown>
</div>
</tab>
</tabs>
</div>

###### <div class="text-white bg-secondary p-1">e) Bug report format</div>

* Each bug should be a separate issue %%i.e., do not report multiple problems in the same bug report.%%
* Write good quality bug reports; ==poor quality or incorrect bug reports will not earn credit==.
* Use a descriptive title.
* Give a good description of the bug with ==steps to reproduce, expected, actual, and screenshots==. If the receiving team cannot reproduce the bug, you will not be able to get credit for it.
* Assign exactly one `severity.*` label to the bug report. Bug report without a severity label are considered `severity.Low` (lower severity bugs earn lower credit)<br>

<div class="indented-level2">
<include src="appendixE-gitHub.md#bug-severity" />
</div>

* Assign exactly one `type.*` label to the issue.
<div class="indented-level2">
<include src="tp-pe.mbdf#type-labels" />
</div>

</box>
</div>

<modal large header="Admin {{ icon_embedding }} Project →" id="modal:v1.3-ppp">
  <include src="tp-deliverables.md#tp-deliverables-ppp"/>
</modal>

<span id="after-ped">

#### <span class="badge badge-primary">PE-D</span> <span class="text-primary">After the session</span>
* **The relevant bug reports will be transferred to your issue tracker** within a day after the session is over. Once you have received the bug reports for your product, you can decide whether you will act on reported issues before the final submission {{ version_final }}. For some issues, the correct decision could be to reject or postpone to a version beyond {{ version_final }}.<br>
  Reminder: There is no penalty for any of the bugs you received in the PE-D.
* **If you have received stray bug reports** (i.e., bug reports that don't seem to be about your project), do let us know ASAP (email the prof).
* **You can navigate to the original bug report** (via the back-link provided in the bug report given to you) and post in that issue thread to communicate with the tester who reported the bug %%e.g. to ask for more info%%, etc. However, the tester is not obliged to respond. Note that simply replying to the bug report in your own repo will not notify the tester.
  * {{ icon_tip }} Do not argue with the tester to try to convince that person that your way is correct/better. If at all, you can gently explain the rationale for the current behavior but do not waste time getting involved in long arguments. If you think the suggestion/bug is unreasonable, just thank the tester for their view and discontinue to discussion.
* **If you have received 'insincere' bug reports** that seem like just an attempt to increase the tester's bug count, please let us know.<br>
  As for the other bug reports, you can deal with them as you see fit (i.e., triage, apply labels, assign, close etc.).<br>
* **You may ignore `type/severity.*` labels given by the tester.** They will not affect you or the tester either way -- they were there just for the testers to practice. You may apply your own type/severity labels if you wish.{% if cs2103 or tic4002 %}
* **If a bug report is simply a feature suggestion**, you can take note of it and close it (to reduce clutter in the issue tracker, and to make it easy for the teaching team to track your progress on dealing with PE-D issues). Similarly, you can close PE-D issues not relevant to {{ version_penultimate }}.{% endif %}


<box type="wrong" seamless>

**Note that listing bugs as 'known bugs' in the UG or specifying _unreasonable_ constraints in the UG to make bugs 'out of scope' will not exempt those bugs from the final grading.** That is, PE testers can still earn credit for reporting those bugs and you will still be penalized for them.<br>
 However, a product is allowed to have 'known limitations' %%(e.g., a daily expense tracking application meant for students is unable to handle expenses larger than $999)%% as long as they don't degrade the product's use within the intended scope. They will not be penalized.
</box>
<box type="info" tags="m--cs2103 m--tic4002" seamless>

**Even bugs inherited from AB3 need to be fixed.** As mentioned in a previous week, even bugs you inherited from AB3 need fixing %%(because "we inherited it from the previous dev team" is not a valid excuse to leave a bug unfixed)%%. If you are unsure if something is such a bug that need fixing, please post in the forum.
</box>
<box type="tip" seamless>

**Identify bugs you missed in the PE-D:** Visit the issue tracker of the team you tested and see bugs reported by others who tested the same product. Identify bugs you missed (if any). That knowledge might help you find similar bugs in your own product as well as find more bugs during the PE.
</box>
</span>
